// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text.RegularExpressions;

namespace DeploymentScheduler.Helpers
{
    /// <summary>
    /// Arguments class.
    /// </summary>
    public class Arguments
    {
        // Variables
        private readonly Dictionary<string, string> _Parameters = null;

        // Constructor
        public Arguments(string[] args)
        {
            _Parameters = new Dictionary<string, string>();
            var spliter = new Regex(@"^-{1,2}|^/|=|:",
                RegexOptions.IgnoreCase | RegexOptions.Compiled);

            var Remover = new Regex(@"^['""]?(.*?)['""]?$",
                RegexOptions.IgnoreCase | RegexOptions.Compiled);

            string Parameter = null;
            string[] Parts;

            // Valid parameters forms:
            // {-,/,--}param{ ,=,:}((",')value(",'))
            // Examples:
            // -param1 value1 --param2 /param3:"Test-:-work"
            //   /param4=happy -param5 '--=nice=--'
            foreach (var Txt in args)
            {
                // Look for new parameters (-,/ or --) and a
                // possible enclosed value (=,:)
                Parts = spliter.Split(Txt, 3);

                switch (Parts.Length)
                {
                    // Found a value (for the last parameter
                    // found (space separator))
                    case 1:
                        if (Parameter != null)
                        {
                            if (!_Parameters.ContainsKey(Parameter.ToUpper()))
                            {
                                Parts[0] =
                                    Remover.Replace(Parts[0], "$1");

                                _Parameters.Add(Parameter.ToUpper(), Parts[0]);
                            }

                            Parameter = null;
                        }

                        // else Error: no parameter waiting for a value (skipped)
                        break;

                    // Found just a parameter
                    case 2:
                        // The last parameter is still waiting.
                        // With no value, set it to true.
                        if (Parameter != null)
                        {
                            if (!_Parameters.ContainsKey(Parameter.ToUpper()))
                                _Parameters.Add(Parameter.ToUpper(), "true");
                        }

                        Parameter = Parts[1];
                        break;

                    // Parameter with enclosed value
                    case 3:
                        // The last parameter is still waiting.
                        // With no value, set it to true.
                        if (Parameter != null)
                        {
                            if (!_Parameters.ContainsKey(Parameter.ToUpper()))
                                _Parameters.Add(Parameter.ToUpper(), "true");
                        }

                        Parameter = Parts[1];

                        // Remove possible enclosing characters (",')
                        if (!_Parameters.ContainsKey(Parameter.ToUpper()))
                        {
                            Parts[2] = Remover.Replace(Parts[2], "$1");
                            _Parameters.Add(Parameter.ToUpper(), Parts[2]);
                        }

                        Parameter = null;
                        break;
                }
            }

            // In case a parameter is still waiting
            if (Parameter != null)
            {
                if (!_Parameters.ContainsKey(Parameter.ToUpper()))
                    _Parameters.Add(Parameter.ToUpper(), "true");
            }
        }

        public string this[string param]
        {
            get
            {
                if (_Parameters.ContainsKey(param.ToUpper()))
                    return _Parameters[param.ToUpper()];
                else
                    return null;
            }
        }

        public bool Exist(string param)
        {
            return _Parameters.ContainsKey(param.ToUpper());
        }
    }
}