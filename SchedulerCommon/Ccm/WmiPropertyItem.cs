// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using SchedulerCommon.Logging;

namespace SchedulerCommon.Ccm
{
    internal class WmiPropertyItem : IPropertyItem
    {
        private readonly WmiEventSource _log = WmiEventSource.Log;

        private readonly PropertyData propertyData;

        public string PropertyName
        {
            get
            {
                if (this.propertyData == null)
                    return string.Empty;
                return this.propertyData.Name;
            }
        }

        bool IPropertyItem.BooleanValue
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return false;
                return Convert.ToBoolean(this.propertyData.Value, (IFormatProvider)CultureInfo.InvariantCulture);
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        DateTime IPropertyItem.DataTimeValue
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return DateTime.MinValue;
                var str = this.propertyData.Value.ToString();
                if (string.Compare(str, "00000000000000.000000+000") == 0)
                    return Constants.InitialDate;
                if (str.EndsWith("+000", StringComparison.OrdinalIgnoreCase))
                    str = str.Replace("+000", "+***");
                try
                {
                    return ManagementDateTimeConverter.ToDateTime(str);
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    _log.Error(ex.Message);
                    return Constants.InitialDate;
                }
                catch (ManagementException ex)
                {
                    _log.Error(ex.Message);
                    return Constants.InitialDate;
                }
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)ManagementDateTimeConverter.ToDmtfDateTime(value);
            }
        }

        int IPropertyItem.IntegralValue
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return 0;
                return Convert.ToInt32(this.propertyData.Value, (IFormatProvider)CultureInfo.InvariantCulture);
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        long IPropertyItem.Int64Value
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return 0;
                return Convert.ToInt64(this.propertyData.Value, (IFormatProvider)CultureInfo.InvariantCulture);
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        object IPropertyItem.ObjectValue
        {
            get
            {
                if (this.propertyData == null)
                    return (object)null;
                return this.propertyData.Value;
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = value;
            }
        }

        IResultObject[] IPropertyItem.ObjectArrayValue
        {
            get
            {
                if (this.propertyData == null)
                    return (IResultObject[])null;
                var managementBaseObjectArray = this.propertyData.Value as ManagementBaseObject[];
                if (managementBaseObjectArray == null || managementBaseObjectArray.Length == 0)
                    return (IResultObject[])null;
                var wmiResultObjectArray = new WmiResultObject[managementBaseObjectArray.Length];
                for (var index = 0; index < managementBaseObjectArray.Length; ++index)
                    wmiResultObjectArray[index] = new WmiResultObject(managementBaseObjectArray[index]);
                return (IResultObject[])wmiResultObjectArray;
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        string IPropertyItem.StringValue
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return (string)null;
                return this.propertyData.Value.ToString();
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        string[] IPropertyItem.StringArrayValue
        {
            get
            {
                if (this.propertyData == null || this.propertyData.Value == null)
                    return (string[])null;
                return (string[])this.propertyData.Value;
            }
            set
            {
                if (this.propertyData == null)
                    return;
                this.propertyData.Value = (object)value;
            }
        }

        internal WmiPropertyItem(PropertyData propertyData)
        {
            this.propertyData = propertyData;
        }
    }
}
