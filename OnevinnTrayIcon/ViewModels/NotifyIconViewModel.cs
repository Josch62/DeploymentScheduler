// <auto-generated/>
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using Hardcodet.Wpf.TaskbarNotification;
using Newtonsoft.Json;
using SchedulerCommon.Ccm;
using SchedulerCommon.Common;
using SchedulerCommon.Pipes;
using SchedulerCommon.Sql;

namespace OnevinnTrayIcon.ViewModels
{
    /// <summary>
    /// Provides bindable properties and commands for the NotifyIcon. In this sample, the
    /// view model is assigned to the NotifyIcon in XAML. Alternatively, the startup routing
    /// in App.xaml.cs could have created this view model, and assigned it to the NotifyIcon.
    /// </summary>
    public class NotifyIconViewModel
    {
        private readonly string _userApp = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "UserScheduler.exe");
        private readonly PipeClient _pipeClient = new PipeClient();

        /// <summary>
        /// Shows a window, if none is already open.
        /// </summary>
        public ICommand AbortAutoEnforcement => new DelegateCommand
        {
            CanExecuteFunc = () => SqlCe.GetAutoEnforceFlag(),
            CommandAction = () =>
            {
                var cmd = JsonConvert.SerializeObject(new PipeCommand { Action = "ResetAutoEnforceFlag" });
                _pipeClient.Send(cmd, "3A2CD127-D069-4CD5-994D-C481F4760748");

                Application.Current.Dispatcher.Invoke(() =>
                {
                    Globals.NotifyIcon.IconSource = new BitmapImage(new Uri("pack://application:,,,/Icons/product.ico"));
                });
            },
        };

        public ICommand DoubleClickCommand => new DelegateCommand
        {
            CanExecuteFunc = () => !Process.GetProcessesByName("UserScheduler").Any(),
            CommandAction = () =>
            {
                try
                {
                    Process.Start(_userApp);
                }
                catch { }
            },
        };

        public ICommand ShowStatus => new DelegateCommand
        {
            CanExecuteFunc = () =>
            {
                var jobToDo = CcmUtils.GetUpdatesStatus().Count > 0;

                if (!jobToDo)
                {
                    var allAppsNotInstalled = CcmUtils.RequiredApps.Where(x => !x.InstallState.Equals("Installed") && x.Deadline > DateTime.Now).ToList();
                    jobToDo = allAppsNotInstalled.Count > 0;
                }

                return Application.Current.MainWindow == null && jobToDo;
            },
            CommandAction = () =>
            {
                Application.Current.MainWindow = new MainWindow();
                Application.Current.MainWindow.Show();
            },
        };
    }


    /// <summary>
    /// Simplistic delegate command for the demo.
    /// </summary>
    public class DelegateCommand : ICommand
    {
        public Action CommandAction { get; set; }

        public Func<bool> CanExecuteFunc { get; set; }

        public void Execute(object parameter)
        {
            CommandAction();
        }

        public bool CanExecute(object parameter)
        {
            return CanExecuteFunc == null || CanExecuteFunc();
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
