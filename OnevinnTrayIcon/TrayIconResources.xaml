<ResourceDictionary x:Class="OnevinnTrayIcon.TrayIconResources" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:local="clr-namespace:OnevinnTrayIcon.ViewModels"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <!-- The taskbar context menu - the first row is a dummy to show off simple data binding -->
    <!--
        The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
        reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
     PopupActivation="DoubleClick"
  -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="Open Deployment Scheduler" Command="{Binding DoubleClickCommand}">
            <MenuItem.Icon>
                <Image Source="Icons/product.ico" MaxHeight="22" MaxWidth="22"/>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Show status" Command="{Binding ShowStatus}">
            <MenuItem.Icon>
                <fa:ImageAwesome Icon="Flash" Height="12" Width="12"/>
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Abort Maintenance" Command="{Binding AbortAutoEnforcement}">
            <MenuItem.Icon>
                <fa:ImageAwesome Icon="Close" Height="12" Width="12"/>
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>


    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon x:Key="NotifyIcon"
                    IconSource="Icons/product.ico"
                    ToolTipText="Double-click to open Deployment scheduler, right-click for menu"
                    ContextMenu="{StaticResource SysTrayMenu}"
                    DoubleClickCommand="{Binding DoubleClickCommand}"                   
                    PreviewTrayPopupOpen="TaskbarIcon_TrayPopupOpen">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <local:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

</ResourceDictionary>