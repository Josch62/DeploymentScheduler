// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace UserScheduler.UserControls
{
    /// <summary>
    /// Interaction logic for LimitedDateTimePicker.xaml
    /// </summary>
    public partial class LimitedDateTimePicker : UserControl
    {
        public DateTime PickedTime
        {
            get
            {
                _pickedTime = _pickedTime <= DateTime.Now ? RoundUp(DateTime.Now) : _pickedTime;
                Exp.Header = _pickedTime.ToString();
                return _pickedTime;
            }
            set
            {
                _pickedTime = value;
            }
        }

        private DateTime _pickedTime = DateTime.Now;
        private DateTime _deadLine = DateTime.Now;
        private DateTime _workTime = DateTime.Now;
        private List<string> _24hours = new List<string> { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" };
        private List<string> _12hours = new List<string> { "12", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11" };
        private List<string> _minutes = new List<string> { "00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55" };
        private List<string> _ampm = new List<string> { "AM", "PM" };
        private bool _is24HourEnvironement = DateTimeFormatInfo.CurrentInfo.ShortTimePattern.Contains("H");
        private bool _initDone = false;
        private int _selectedDay = -1;
        private bool _firstBuild = true;

        public LimitedDateTimePicker()
        {
            InitializeComponent();
        }

        public DateTime DeadLine
        {
            get
            {
                return _deadLine;
            }

            set
            {
                try
                {
                    _deadLine = value;
                    _workTime = _pickedTime;
                    BuildYears(_deadLine.Year);
                    BuildAll();
                }
                catch (Exception ex)
                {
                    Globals.Log.Error(ex.Message);
                }
            }
        }

        private void BuildAll()
        {
            try
            {
                _initDone = false;
                var isDeadlineYear = false;
                var isDeadlineMonth = false;
                var isDeadlineDay = false;
                var isDeadlineHour = false;

                if (!(_minutes.Contains(_workTime.Minute.ToString("00")) && _workTime.Second == 0 ) && _firstBuild)
                {
                    _workTime = RoundUp(_workTime);
                }

                if (_deadLine.Year == _workTime.Year)
                {
                    CmbYear.SelectedItem = _deadLine.Year.ToString();
                    isDeadlineYear = true;
                }
                else
                {
                    CmbYear.SelectedItem = _workTime.Year.ToString();
                }

                var allMonths = DateTimeFormatInfo.CurrentInfo.MonthNames.Where(x => !string.IsNullOrEmpty(x)).ToList();

                if (isDeadlineYear)
                {
                    allMonths = allMonths.Where(x => allMonths.IndexOf(x) < _deadLine.Month).ToList();
                    CmbMonth.ItemsSource = allMonths;

                    if (_deadLine.Month <= _workTime.Month)
                    {
                        CmbMonth.SelectedIndex = allMonths.Count() - 1;
                        isDeadlineMonth = true;
                    }
                    else
                    {
                        CmbMonth.SelectedIndex = _workTime.Month - 1;
                    }
                }
                else
                {
                    CmbMonth.ItemsSource = allMonths;
                    CmbMonth.SelectedIndex = _workTime.Month - 1;
                }

                isDeadlineDay = isDeadlineYear && isDeadlineMonth && _workTime.Day >= _deadLine.Day;
                _selectedDay = isDeadlineDay ? _deadLine.Day : _workTime.Day;
                var numberOfDays = DateTime.DaysInMonth(_workTime.Year, _workTime.Month);
                BuildDays(numberOfDays, isDeadlineMonth);

                var allHours = _is24HourEnvironement ? new List<string>(_24hours) : new List<string>(_12hours);
                var allAmPm = new List<string>(_ampm);

                if (isDeadlineYear && isDeadlineMonth && _deadLine.Day <= _workTime.Day)
                {
                    if (_is24HourEnvironement)
                    {
                        allHours = allHours.Where(x => Convert.ToInt32(x) <= _deadLine.Hour).ToList();
                    }
                    else
                    {
                        if (_deadLine.ToString("tt").Equals(_workTime.ToString("tt")))
                        {
                            var baseIndex = _deadLine.Hour.ToString("hh").Equals("11") ? 13 : 12;
                            var startindex = _deadLine.ToString("tt").Equals("AM") ? 0 : baseIndex;
                            var finish = _deadLine.Hour - startindex;
                            allHours = allHours.Where(x => Convert.ToInt32(x) <= finish).ToList();
                            allHours.Insert(0, "12");
                        }

                        if (_deadLine.ToString("tt").Equals("AM"))
                        {
                            allAmPm.Remove("PM");
                        }
                    }

                    CmbHour.ItemsSource = allHours;
                }
                else
                {
                    CmbHour.ItemsSource = allHours;
                }

                CmbAmPm.ItemsSource = allAmPm;
                CmbAmPm.SelectedItem = _workTime.ToString("tt");
                CmbAmPm.Visibility = _is24HourEnvironement ? Visibility.Hidden : Visibility.Visible;

                if (_is24HourEnvironement)
                {
                    CmbHour.SelectedItem = allHours.Contains(_workTime.ToString("HH")) ? _workTime.ToString("HH") : "00";
                }
                else
                {
                    var temp = _workTime.ToString("hh");

                    CmbHour.SelectedItem = allHours.Contains(_workTime.ToString("hh")) ? _workTime.ToString("hh") : "12";
                }

                var allMinutes = new List<string>(_minutes);

                isDeadlineHour = isDeadlineDay && _deadLine.Hour <= _workTime.Hour;

                if (isDeadlineHour)
                {
                    allMinutes = allMinutes.Where(x => Convert.ToInt32(x) <= _deadLine.Minute).ToList();
                }

                CmbMinute.ItemsSource = allMinutes;

                CmbMinute.SelectedItem = allMinutes.Contains(_workTime.Minute.ToString("00")) ? _workTime.Minute.ToString("00") : "00";

                if (_firstBuild)
                {
                    _firstBuild = false;
                }

                ConstructPickedTime(true);
                _initDone = true;
            }
            catch (Exception ex)
            {
                Globals.Log.Error(ex.Message);
            }
        }

        private DateTime RoundUp(DateTime date)
        {
            return new DateTime(date.Ticks - (date.Ticks % (TimeSpan.TicksPerMinute * 5))).AddMinutes(5);
        }

        public bool Expanded
        {
            get
            {
                return Exp.IsExpanded;
            }

            set
            {
                Exp.IsExpanded = value;
            }
        }

        private void BuildDays(int numberOfDaysInMonth, bool isDeadLineMonth)
        {
            wrapPanelDays.Children.Clear();

            for (var ind = 1; ind <= numberOfDaysInMonth; ind++)
            {
                var inactivate = isDeadLineMonth && ind > _deadLine.Day;

                var tb = new TextBlock
                {
                    Text = ind.ToString("00"),
                    Background = inactivate ? new SolidColorBrush(Colors.LightSalmon) : new SolidColorBrush(Colors.LightBlue),
                    Width = 18,
                    Height = 18,
                    FontSize = 12,
                    Margin = new Thickness(1),
                    Padding = new Thickness(3, .5, 0, 0),
                    IsEnabled = inactivate ? false : true,
                };

                tb.MouseLeftButtonUp += Tb_MouseLeftButtonUp;
                wrapPanelDays.Children.Add(tb);
            }

            if (wrapPanelDays.Children.Count >= _selectedDay && _selectedDay != -1)
            {
                var tx = wrapPanelDays.Children[_selectedDay - 1] as TextBlock;
                tx.Background = new SolidColorBrush(Colors.Yellow);
            }
            else
            {
                var tx = wrapPanelDays.Children[0] as TextBlock;
                tx.Background = new SolidColorBrush(Colors.Yellow);
                _selectedDay = wrapPanelDays.Children.Count;
            }
        }

        private void Tb_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            foreach (TextBlock t in wrapPanelDays.Children)
            {
                if (t.IsEnabled)
                {
                    t.Background = new SolidColorBrush(Colors.LightBlue);
                }
            }

            if (sender is TextBlock tb)
            {
                tb.Background = new SolidColorBrush(Colors.Yellow);
                _selectedDay = wrapPanelDays.Children.IndexOf(tb) + 1;
                ConstructPickedTime();
                BuildAll();
            }
        }

        private void BuildYears(int lastYear)
        {
            CmbYear.Items.Clear();
            var thisYear = DateTime.Now.Year;

            for (var y = thisYear; y <= lastYear; y++)
            {
                CmbYear.Items.Add(y.ToString("0000"));
            }

            if (CmbYear.Items.Count < 1)
            {
                CmbYear.Items.Add(thisYear.ToString());
                Globals.Log.Warning($"Added this year to combobox '{thisYear.ToString()}' - this indicates a deployment error(wmi), check you schedule.");
            }
        }

        private void CmbMonth_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (!_initDone)
            {
                return;
            }

            var year = Convert.ToInt32(CmbYear.Text);
            var numberOfDays = DateTime.DaysInMonth(year, CmbMonth.SelectedIndex + 1);

            if (_selectedDay > numberOfDays)
            {
                _selectedDay = numberOfDays;
            }

            ConstructPickedTime();
            BuildAll();
        }

        private void CmbYear_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (!_initDone)
            {
                return;
            }

            if (CmbYear.SelectedItem is string y)
            {
                var year = Convert.ToInt32(y);
                var numberOfDays = DateTime.DaysInMonth(year, CmbMonth.SelectedIndex + 1);

                if (_selectedDay > numberOfDays)
                {
                    _selectedDay = numberOfDays;
                }
            }

            ConstructPickedTime();
            BuildAll();
        }

        private void ConstructPickedTime(bool updatePickedTime = false)
        {
            var errorLogDateTimeString = string.Empty;

            try
            {
                var yyyy = CmbYear.SelectedItem as string;
                var MM = (CmbMonth.SelectedIndex + 1).ToString("00");
                var dd = _selectedDay.ToString("00");
                var hh = CmbHour.SelectedItem as string;
                var mm = CmbMinute.SelectedItem as string;
                var ampm = CmbAmPm.SelectedItem as string;

                var ds = string.Empty;

                if (_is24HourEnvironement)
                {
                    ds = $"{yyyy}-{MM}-{dd} {hh}:{mm}:00";
                }
                else
                {
                    ds = $"{MM}/{dd}/{yyyy} {hh}:{mm}:00 {ampm}";
                }

                errorLogDateTimeString = ds;

                var dt = Convert.ToDateTime(ds, CultureInfo.CurrentCulture);

                _workTime = dt < DateTime.Now.AddMinutes(5) ? RoundUp(DateTime.Now) : dt;

                if (updatePickedTime)
                {
                    Exp.Header = dt.ToString();
                    _pickedTime = dt;
                }
            }
            catch (Exception ex)
            {
                Globals.Log.Error($"errorLogDateTimeString = {errorLogDateTimeString} " + ex.Message);
            }
        }

        private void Time_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (!_initDone)
            {
                return;
            }

            ConstructPickedTime();
            BuildAll();
        }
    }
}
