// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using SchedulerCommon.Logging;

namespace SchedulerCommon.Ccm
{
    public sealed class WmiResultObject : IResultObject, IDisposable
    {
        private readonly WmiEventSource _log = WmiEventSource.Log;
        private ManagementBaseObject _managementObject;
        private Dictionary<string, IPropertyItem> _properties;

        public Dictionary<string, IPropertyItem> Properties
        {
            get
            {
                if (_properties != null)
                    return _properties;
                _properties = new Dictionary<string, IPropertyItem>();
                foreach (var systemProperty in _managementObject.SystemProperties)
                    _properties.Add(systemProperty.Name, new WmiPropertyItem(systemProperty));
                foreach (var property1 in _managementObject.Properties)
                {
                    _properties.Add(property1.Name, new WmiPropertyItem(property1));
                    if (property1.Value is ManagementBaseObject)
                    {
                        foreach (var property2 in ((ManagementBaseObject)property1.Value ).Properties)
                            _properties.Add(property1.Name + "_" + property2.Name, new WmiPropertyItem(property2));
                    }
                }
                return _properties;
            }
        }

        public ManagementBaseObject ManagedObject
        {
            get
            {
                return _managementObject;
            }
        }

        IPropertyItem IResultObject.this[string name]
        {
            get
            {
                try
                {
                    return Properties[name];
                }
                catch (KeyNotFoundException ex)
                {
                    _log.Error(ex.Message);
                }

                return new WmiPropertyItem((PropertyData)null);
            }
        }

        internal WmiResultObject(ManagementBaseObject managementObject)
        {
            this._managementObject = managementObject;
        }

        IResultObject IResultObject.ExecuteMethod(string methodName, Dictionary<string, object> methodParameters)
        {
            if (string.IsNullOrEmpty(methodName))
                throw new ArgumentNullException("methodName");
            var managementObject1 = _managementObject as ManagementObject;

            if (managementObject1 == null)
                throw new ArgumentException("ManagementBaseObject can't invoke a method");
            var managementObject2 = (ManagementBaseObject)null;

            try
            {
                var options = new InvokeMethodOptions(null, ManagementOptions.InfiniteTimeout);
                var wmiMethodParameter = WmiUtilityClass.GetWmiMethodParameter(managementObject1, methodName, methodParameters);
                managementObject2 = managementObject1.InvokeMethod(methodName, wmiMethodParameter, options);
            }
            catch (ManagementException ex)
            {
                _log.Error(ex.Message);
            }
            catch (COMException ex)
            {
                _log.Error(ex.Message);
            }
            return new WmiResultObject(managementObject2);
        }

        void IDisposable.Dispose()
        {
            GC.SuppressFinalize(this);
            if (_managementObject == null)
                return;
            _managementObject.Dispose();
            _managementObject = null;
        }

        public override string ToString()
        {
            if (_managementObject != null)
                return _managementObject.GetText(TextFormat.Mof);
            return base.ToString();
        }
    }
}
